#version 420 core

in vec3 vPos;
in vec3 vNorm;
uniform mat4 MV;
uniform float alfa;
uniform vec3 ka;
uniform vec3 kd;
uniform vec3 ks;

out vec4 color;
uniform mat4 PV;
uniform mat4 VMatrix;
uniform vec3 Ia;
uniform vec3 Id;
uniform vec3 Is;
uniform vec3 light;

out vec4 vertex_color;


void main(void)
{
    vec3 v = (vec3(MV* vec4(vPos, 1.0)));
    vec3 N = normalize(mat3(transpose(inverse(MV)))*vNorm);
    vec3 l = (VMatrix * vec4(light,1.0)).xyz;
    vec3 V =normalize(  - v);

    vec3 L = normalize(l - v);

    float diffuse = max(dot(L, N), 0.0);
    vec3 R =normalize(reflect(-L, N));
    float spec=0.0;
    spec = max(dot(R, V), 0.0);
    spec = pow(spec, alfa);
    vec3 I_ambient = ka*Ia;
    vec3 I_diffuse = kd*Id*diffuse;
    vec3 I_specular = ks*Is*spec;
    color = vec4(I_ambient+I_diffuse+I_specular, 1.0);
    vertex_color = color;
    gl_Position = PV * vec4(vPos, 1.0f);
}